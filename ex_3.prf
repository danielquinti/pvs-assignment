(parity)
(ex_3
 (ex_3a 0
  (ex_3a-1 nil 3828870072
   ("" (induct n)
    (("1" (expand odd) (("1" (inst 1 0) (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (flatten)
        (("2" (split)
          (("1" (assert)
            (("1" (expand odd)
              (("1" (assert)
                (("1" (skolem!)
                  (("1" (inst 2 k!1+1) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (aux 0
  (aux-1 nil 3830005122
   ("" (lemma ex_3a)
    (("" (skolem!)
      (("" (flatten)
        (("" (inst -1 n!1)
          (("" (assert)
            (("" (expand odd -1)
              (("" (expand even 2) (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd const-decl "bool" parity nil)
    (even const-decl "bool" parity nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ex_3a formula-decl nil ex_3 nil))
   shostak))
 (ex_3b 0
  (ex_3b-1 nil 3828871939
   ("" (induct n)
    (("1" (flatten)
      (("1" (expand even)
        (("1" (skolem!)
          (("1" (expand odd) (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (flatten)
      (("2" (expand odd)
        (("2" (expand even)
          (("2" (inst 2 0) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (split)
        (("1" (split)
          (("1" (split)
            (("1" (flatten)
              (("1" (expand even)
                (("1" (skolem! -3)
                  (("1" (skolem!) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand odd)
                (("2" (expand even) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (split)
          (("1" (propax) nil nil)
           ("2" (split)
            (("1" (flatten)
              (("1" (expand even)
                (("1" (expand odd) (("1" (propax) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (expand even)
                (("2" (expand odd)
                  (("2" (skosimp*)
                    (("2" (inst 2 k!1+1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (ex_3c 0
  (ex_3c-1 nil 3828876598
   ("" (induct n)
    (("1" (flatten) (("1" (expand odd) (("1" (propax) nil nil)) nil))
      nil)
     ("2" (flatten)
      (("2" (expand odd)
        (("2" (expand even)
          (("2" (inst 1 0) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (skolem!)
      (("3" (flatten)
        (("3" (split)
          (("1" (split)
            (("1" (split)
              (("1" (flatten)
                (("1" (expand odd -1)
                  (("1" (expand even -2)
                    (("1" (skolem!)
                      (("1" (skolem!) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand even 1)
                  (("2" (expand odd -1)
                    (("2" (skolem! -1)
                      (("2" (inst 1 k!1+1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil)
           ("2" (split)
            (("1" (propax) nil nil)
             ("2" (split)
              (("1" (flatten)
                (("1" (expand odd -1)
                  (("1" (expand even -2)
                    (("1" (skolem!)
                      (("1" (skolem!) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand even -1)
                  (("2" (expand odd 2) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

