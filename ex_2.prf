(properties)
(composition)
(ex_2a
 (ex_21 0
  (ex_21-1 nil 3828867973
   ("" (expand comp)
    (("" (expand surjective)
      (("" (expand injective)
        (("" (flatten)
          (("" (skolem!)
            (("" (inst -1 "h(y!1)")
              (("" (skolem!)
                (("" (inst 1 x!1)
                  (("" (assert)
                    (("" (inst -2 y!1 "f(x!1)")
                      (("" (split)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp const-decl "C" composition nil)
    (injective const-decl "bool" properties nil)
    (f const-decl "[X -> Y]" ex_2a nil)
    (X nonempty-type-decl nil ex_2a nil)
    (h const-decl "[Y -> Z]" ex_2a nil)
    (Y nonempty-type-decl nil ex_2a nil)
    (Z nonempty-type-decl nil ex_2a nil)
    (surjective const-decl "bool" properties nil))
   shostak)))
(ex_2b
 (ex_22 0
  (ex_22-1 nil 3828869099
   ("" (expand f)
    (("" (expand bijective)
      (("" (split)
        (("1" (expand injective)
          (("1" (skolem!)
            (("1" (flatten) (("1" (decompose-equality) nil nil)) nil))
            nil))
          nil)
         ("2" (expand surjective)
          (("2" (detuple-boundvars)
            (("2" (skolem!)
              (("2" (inst 1 -y!2 "(y!1/2)") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective const-decl "bool" properties nil)
    (surjective const-decl "bool" properties nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (injective const-decl "bool" properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (f const-decl "[real, real]" ex_2b nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

