(ex_1
 (ex_1a 0
  (ex_1a-1 nil 3829994251
   ("" (expand r)
    (("" (expand equivalence)
      (("" (split)
        (("1" (expand reflexive)
          (("1" (skolem!)
            (("1" (inst 1 0) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (expand symmetric)
          (("2" (skolem!)
            (("2" (flatten)
              (("2" (skolem!)
                (("2" (inst 1 -k!1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand transitive)
          (("3" (skolem!)
            (("3" (flatten)
              (("3" (skolem!)
                (("3" (skolem!)
                  (("3" (inst 1 k!1+k!2) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equivalence const-decl "bool" bin_rel nil)
    (transitive const-decl "bool" bin_rel nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (symmetric const-decl "bool" bin_rel nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (reflexive const-decl "bool" bin_rel nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (R const-decl "PRED[[nat, nat]]" ex_1 nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak)))

